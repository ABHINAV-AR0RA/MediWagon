import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as ElevenLabs from "../../../../../index";
export declare namespace SingleUse {
    interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}
export declare class SingleUse {
    protected readonly _options: SingleUse.Options;
    constructor(_options?: SingleUse.Options);
    /**
     * Generate a time limited single-use token with embedded authentication for frontend clients.
     *
     * @param {ElevenLabs.SingleUseTokenType} tokenType
     * @param {SingleUse.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.tokens.singleUse.create("realtime_scribe")
     */
    create(tokenType: ElevenLabs.SingleUseTokenType, requestOptions?: SingleUse.RequestOptions): core.HttpResponsePromise<ElevenLabs.SingleUseTokenResponseModel>;
    private __create;
}
